var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/get-started/introduction/",title:"🐈 Meet CutieCat",description:"Meet CutieCat: Your cat-themed hacking \u0026 prototyping companion!",content:` ❤️ If you have a v0 CutieCat, you're an early supporter of the project! Your feedback \u0026 suggestions are cherished. What is the CutieCat? # CutieCat is your new hacking \u0026amp; prototyping companion! It\u0026rsquo;s a cat-shaped console that lets you experiment with USB Attacks, Wireless Hacking, and fun mini-projects in CircuitPython.
Our CutieCat add-ons will get you building prototypes in no time!
CutieCat Features # CutieCat is built around the ESP32, a WiFi \u0026amp; Bluetooth capable microcontroller that makes it perfect for low-cost wireless hacks! It also supports native USB, which lets you run keystroke injection attacks.
Features at a Glance # Compatible with Adafruit + Sparkfun Sensors Wardriving with WiGLE \u0026amp; Kismet Support DuckyScript Compatible USB Attacks WiFi Reconnaissance More Supported Projects Coming Soon!
`}),e.add({id:1,href:"/docs/usb-attacks/introduction/",title:"Introduction",description:"An Introduction to USB Attacks",content:` From time to time, a new exploit in ubiquitous hardware (like USB) is engendered. Taking advantage of such vulnerabilities often requires specialized knowledge, or is patched quickly enough that the attack surface is practically non-existent in real world applications.
However, Keystroke Injection is an exploit that has stood the test of time by taking advantage of a computer\u0026rsquo;s inherent trust of USB Keyboards!
What is Keystroke Injection? # Human Interface Devices (HID) encompass things like mice and keyboards - devices that require practically no setup or authorization to use.
Keystroke Injection, coined by Hak5, is a type of HID attack that uses a microcontroller to emulate a keyboard - and delivers pre-programmed keystrokes at devastating speeds!
In The Wild # Fin7 Social Engineered victims into plugging malicious USB\u0026rsquo;s into their computers Samy Kamkar\u0026rsquo;s USB Driveby creates a DNS backdoor on victim devices Emulate Razer Devices to take advantage of a privilege escalation bug! Preventative Measures # Some EDR\u0026rsquo;s can detect \u0026amp; prohibit devices typing at speeds \u0026ldquo;faster than a human should\u0026rdquo;.
Solutions like USB Guard can be used to create policies for whitelisting or blacklisting USB devices - so you can lock your computer into using the default keyboard or certain trusted peripherals.
`}),e.add({id:2,href:"/docs/usb-attacks/scriptkitty-fw/",title:"ScriptKitty Firmware",description:"Learn about DevKitty's Cat-Themed Keystroke Injection Firmware",content:` ℹ️ Check out the flashing guide to load this firmware on your DevKitty! ScriptKitty is a cat-themed keystroke injection tool that lets you select hundreds of usb attack payloads at the press of a button. You can even deploy attacks remotely via a WiFi interface!
Get the source code and binaries here.
ScriptKitty Introduction # Flash Drive # The ScriptKitty Firmware creates a flash drive when plugged into your computer. This makes it easy to drag and drop new payloads over - or exfiltrate files from a target device!
This is where you can also modify the configuration file.
Payload Organization # You\u0026rsquo;ll notice that payloads are organized by Operating System, and Sub-categories on the flash drive. Since you don\u0026rsquo;t know what types of systems you\u0026rsquo;ll encounter in the wild, you can have hundreds ready to deploy at the press of a button!
Try out one of our example prank payloads for your target operating system\u0026hellip; they\u0026rsquo;re harmless ;)
Running An Attack # Use the D-Pad to navigate the on-screen interface. You\u0026rsquo;ll notice it matches the folder / file structure on your ScriptKitty flash drive!
Use the UP/DOWN buttons to scroll through the current directory. Use LEFT to enter a directory or run a file. RIGHT will take you back!
Try out the RickRoll payload for your target operating system.
ℹ️ Check out the dedicated sections for more info on writing payloads / ScriptKitty configuration. Add New Payloads # Adding new payloads is as simple as dragging \u0026amp; dropping them over to the USB Drive! Payload must end in .txt extension and are written in DuckyScript. Check out our payload guide to learn the syntax!
Thanks to Hak5, hundreds of payloads are already developed \u0026amp; ready to deploy. Check out their repo for inspiration! Only USB RubberDucky Payloads are compatible at the moment.
Hak5 Ducky Payload Repo Official ScriptKitty Payloads Emulate USB Devices # By default, the ScriptKitty Firmware emulates an Apple Keyboard to bypass MacOS flagging non-Apple keyboards.
You can easily modify the type of device it emulates by editing the config.txt file on the flash drive! All you have to do is edit the VID and PID parameter - which correspond to Vendor ID and Product ID respectively.
You can use a USB vendor lookup tool like this open database to choose a device to emulate.
On Linux / Mac you can check if this worked using:
lsusb On Windows, check your Device Manager!
`}),e.add({id:3,href:"/docs/get-started/assembly/",title:"⚒️ Assembly Guide",description:"Soldering \u0026 assembling your DevKitty!",content:` ⚠️ Updated pics \u0026 assembly video coming by Sep 06 2024. ⚙ Parts # Part Description Microcontroller ESP32-S3 WiFi \u0026amp; Bluetooth MCU Screen 128x64px SH1106 OLED Display Pin Header 6 Pin Breakout for CutieCat Add-ons Antenna (Patch) Omni Antenna Antenna (External) Long-range Antenna ℹ️ Learn more about component selection on our hardware guide. 🗒 Steps # 1. Place the ESP32 # a. Melt a tack of solder onto the top right pad.
b. Reheat the blob and place the microcontroller!
Previous Next Start by melting a small \u0026ldquo;tack\u0026rdquo; of solder to one of the CutieCat microcontroller pads. This will help us place the ESP32 before committing. Center the ESP32 on the microcontroller footprint. Reheat the tack of solder until it melts, while pressing down the ESP32. Don\u0026rsquo;t worry about how the first joint looks! Let the solder cool! If you need to readjust the microcontroller, simply reheat the joint. 2. Solder the ESP32 # ⚠️ Be extra careful not to burn the switch connector, or bridge neighboring pins. Solder the rest of the pins!
Previous Next a. Solder each remaining pad on the microcontroller! b. Ensure the connection is solid by bridging the ESP32 pad \u0026amp; PCB pads c. Avoid burning the switch connector! * *Switch connector will be moved in update v0.1 design
3. Solder the Expansion Header # Previous Next a. Insert the 6-Pin Header on the Side b. Lay the board \u0026amp; header flush on a flat surface c. Solder the joints! 4. Prep + Solder the Screen # ⚠️ Press down on center of screen - the edges are really fragile! Previous Next a. Add double-sided foam tape at the bottom of the screen footprint (not pictured) b. Center \u0026amp; press the screen in place. c. Solder the screen joints on the back. 5. Antenna \u0026amp; Case Assembly # 🛈 Read our long-range mod guide before adding the external antenna!! Previous Next a. Snap the patch antenna onto the ESP32 u.fl connector b. Insert the D-Pad into the Top Enclosure c. Place the CutieCat in face-down d. Snap-on the Back Enclosure! 6. Quality Assurance # Plug in your CutieCat with USB Type C With your board fully assembled, it should power on the QA Firmware! Check out our Firmware Guide to load new firmware. 🛈 If your board doesn't work, check our troubleshooting guide. 🔧 Additional Mods # Check out our mods section for more, including adding the long-range antenna!
🔋 Battery Mod 📡 Long-Range Antenna 🛰 GPS Mod `}),e.add({id:4,href:"/docs/guides/dev-kit-assembly/",title:"Assembly Guide",description:"Soldering \u0026 assembling your DevKitty!",content:` ⚠️ Assembly video \u0026 updated pics coming soon. Parts # Buy the DevKitty soldering kit on our webstore!
Part Description Count DevKitty PCB Partially assembled PCB 1 Microcontroller S2 Mini (ESP32-S2 Breakout) 1 Screen SH1106 I2C Display 1 Male Header (Short) S2 Mini Mounting Headers 2 *Female Header (Short) S2 Mini Breakout Headers 2 *Female Header (Long) Expansion Header 1 Learn more about these parts →
Your DevKitty PCB comes with surface mount Buttons, NeoPixel, and Qwiic Connector pre-soldered since these are a little tricky!
Steps # 1. Prep the Mounting Headers # Start by soldering the male headers to your DevKitty PCB, button side up!
The short side of the pin headers should poke through Using a breadboard can help keep them in place! If not you can rest it carefully flush on the table. ℹ️ Check out our slim mod before continuing if you want a smaller form-factor! 2. Assemble the Microcontroller # This step is optional!
Assemble the microcontroller, by soldering the short female pin headers to the inside rows of the S2 Mini.
You can flip the microcontroller over on a flat surface to solder the pins. Be careful not to get solder in the other holes! Next, press the S2 Mini onto the headers on the back of your DevKitty - and solder! 3. Solder the Expansion Header # Next, solder on the long female header to the side of your DevKitty PCB. You should be able to lay the board flush on a table. 4. Prep \u0026amp; Solder the Screen # Next, peel off the adhesive tape on your DevKitty PCB, and gently push the screen in place.
Be careful to avoid the edges of the screen! It can crack. 5. Assemble the Case # Finally, assemble the snap fit case!
Insert the Bumper Button into the Lower Enclosure Press fit the assembled DevKitty into the Lower Enclosure Next, place the D-Pad into the Upper Enclosure, face down Flip over the Lower Enclosure, and snap it into place! 6. Power Your DevKitty! # Plug your DevKitty into a USB-C power source. It should run a simple function tester on the screen and Neopixel if successful.
Now we\u0026rsquo;re ready to update our firmware!
Links # 3D Printed Cases Component Selection `}),e.add({id:5,href:"/docs/guides/pick-firmware/",title:"Firmware Guide",description:"Picking the right firmware for your DevKitty.",content:` ℹ️ Our firmware is currently experimental as we continue to explore \u0026 make improvements to the DevKitty ecosystem. Overview # The ESP32-S2 is a capable chip that supports WiFi functionality, native USB, and a handful of other nifty features that make it perfect for powering our pocket-sized hacking companions.
At the moment, we\u0026rsquo;re experimenting with custom firmware that maximizes DevKitty\u0026rsquo;s independent strengths - this includes:
DevKitty Wardriver: Cat-themed wardriving \u0026amp; WiFi reconnaissance DevKitty Invader: A simple WiFi attack \u0026amp; network defense tool (coming soon) ScriptKitty: A BadUSB platform with WiFi-triggered attacks \u0026amp; onboard storage! These tools aren\u0026rsquo;t perfect, but we\u0026rsquo;re building them alongside our educational content and focusing on bringing more functionality to the features \u0026amp; specific tools based off your feedback.
CircuitPython # Adafruit\u0026rsquo;s CircuitPython is an interpreted programming language, that runs directly on your DevKitty, and a handful of other capable boards.
CircuitPython lets you develop code \u0026amp; prototype on any computer - or even your smartphone without needing\u0026hellip; finish this thought
`}),e.add({id:6,href:"/docs/get-started/firmware/",title:"🖥️ Firmware Guide",description:"Learn to flash \u0026 pick the right firmware for DevKitty devices.",content:` ℹ️ Our firmware is currently experimental as we continue to explore \u0026 make improvements to the DevKitty ecosystem. CutieCat comes flashed with QA Firmware to test basic functionality. To start hacking you\u0026rsquo;ll have to load new firmware. If you\u0026rsquo;re adventurous you can even learn to write your own!
💻 Firmware Guide # ℹ️ Pick a firmware, and keep reading to learn how to flash these projects. Official Firmware # We\u0026rsquo;re constantly adding new features and developing cool hacking tools for the ESP32. Here\u0026rsquo;s a couple projects we\u0026rsquo;ve built from your suggestions:
ScriptKitty: Attack computers over a USB connection with Keystroke Injection DevKitty Wardriver: Scan \u0026amp; Map WiFi Devices (WiGLE compatible) DevKitty Sniffer: Gather WiFi \u0026amp; Bluetooth Recon (Kismet compatible) CircuitPython # Our ESP32-based designs are supported by CircuitPython, a lightweight version of Python that lets you develop on the go!
With CircuitPython, you can build hardware prototypes in minutes. We\u0026rsquo;re working on adding some example projects, but you can check out some great guides by Adafruit in the mean time. Our boards feature a Qwiic / Stemma QT compatible connector that lets you easily interface with their sensors!
Download the binary here.
⚡ Flashing Guide # ℹ️ This step uses web serial to flash your board from a web browser, a feature currently only supported through Chrome-based browsers. If you wish to flash via command-line, read our developer guide. Step 1: DFU Mode # Your ESP32 based board needs to enter Device Firmware Upgrade (DFU) mode to be upgraded. Some breakout boards have auto-reset circuits which let the board automatically enter this mode, but you may need to do it manually.
DFU Method 1:
Hold down the Boot button Plug in the DevKitty Release the Boot button DFU Method 2:
Plug CutieCat into your computer Hold down the Boot button Press \u0026amp; Release the Reset button Step 2: Download Your Firmware # Download the appropriate .bin binary file from the firmware guide above.
We\u0026rsquo;re working on adding the binaries to the web UI in the next month!
Step 3: Flash your binary! # In a Chrome browser, visit update.devkitty.io Erase the flash chip Upload the binary file to the web UI. Leave the offset at 0x0 Hit flash and wait for the upload to finish! `}),e.add({id:7,href:"/docs/hardware/cutiecat/",title:"🐈 CutieCat",description:"v0.0 CutieCat Specs \u0026 Features",content:`Overview # CutieCat is a modular cat-shaped console that supports Adafruit QT-Py \u0026amp; Seeed Studio Xiao style microcontrollers.
These tiny but powerful MCU\u0026rsquo;s support WiFi, Bluetooth, Native USB, and all the other fun hacking features we love, in a minimal footprint. CutieCats ship with the Xiao ESP32-S3 but you can easily swap in your own microcontroller!
Features # Previous Next At a Glance # 🔋 Battery Level + Charging 📡 WiFi, Bluetooth, GPS 💾 MicroSD Storage 🕹️ Modular Expansion 🚦 RGB LED Components # Name Part Description CutieCat PCB Custom Circuit Board design Comes with all SMD components pre-soldered for user ease. D-Pad Mini Soft-Touch Button Soft, clicky buttons. Screen SH1106 OLED Display 128x64px 1.3\u0026quot; OLED Display (I2C) Antennas u.fl to RP-SMA PCB-mounted external antenna(s) Micro-SD Push-push connector for Micro-SD Cards. Specs # Expansion \u0026amp; Mods # CutieCat makes prototyping a breeze! The P1 breakout header on the side lets you easily breadboard your ideas. CutieCat also has 2 JST connectors P3 \u0026amp; P3 that let you plug \u0026amp; play with a range of Sparkfun Qwiic or Adafruit Stemma QT Sensors!
CutieCat also features a small 3-pin JST connector P4 for controlling LED light strips.
Check out the mods guide for more info on the modchip!
Changelog # Check out the GitHub for a more extensive changelog.
v0.0
`}),e.add({id:8,href:"/docs/developers/pinout/",title:"Specs",description:"DevKitty Pinout Documentation",content:"Links # Assembly Guide Features # Name Part(s) Description DevKitty PCB 1.6mm 2 layer PCB with NeoPixel \u0026amp; Buttons pre-soldered Microcontroller S2 Mini An ESP32S2 breakout board in the D1 Mini form factor. Screen SH1106 128x64 px 1.3\u0026quot; OLED Display Headers x2 Short Female, x2 Short Male, x1 Long Female Various expansion headers. Only the male headers are necessary! Dimensions # Headers # "}),e.add({id:9,href:"/docs/wardriving/introduction/",title:"Introduction",description:"Get started with Wardriving!",content:`
What is Wardriving? # Wardriving is a reconaissance technique that involves driving around while scanning for wireless devices. It\u0026rsquo;s one of the quickest ways to gather intelligence on large amounts of WiFi networks and smart devices!
By combining wireless \u0026amp; GPS data, you can create maps that let you easily locate where vulnerable networks were spotted.
Use Cases # You can use WiFi reconaissance \u0026amp; wardriving for hunting down lost devices, creating interesting visualizations, and so much more! These are a couple examples:
CreepDetector # In 2018 Alex created the CreepDetector, a project that uses wardriving to detect if someone is stalking you! By looking for the presence of a WiFi device following you along a
DNS DriveBy # Wigle.net is a testament to the power of crowdsourcing. Millions of contributions to this open-source database of networks
Notable Projects # Getting Started # If you want to try wardriving, all you need is a WiFi \u0026amp; GPS enabled device!
An Android phone with Wigle will suffice for sniffing networks, but has limitations when it comes to picking up client devices \u0026amp; capturing WiFi recon. This is where your CutieCat shines! Keep reading to see what hardware you need.
`}),e.add({id:10,href:"/docs/hardware/minimeter/",title:"⚡ MiniMeter",description:"Compact LiPo Charger \u0026 Battery Meter",content:` 🛈 Skip ahead to the mods if you're just looking to install your MiniMeter! Overview # MiniMeter is a compact LiPo Charger \u0026amp; Battery Meter. The minimal footprint can be dropped into any existing design or easily powers microcontrollers! Every DevKitty design is compatible with MiniMeter.
Features # 🔋 Measure Battery Level ⚡ LiPo Charging ⚡ Toggle Charging Speed ⚡ Constant 3.3V Output (LDO) Usage # On the CutieCat, its as simple as soldering MiniMeter into place! You can hook up an external LiPo battery \u0026amp; connect a switch.
Components # Name Part Description MAX17048 Custom Circuit Board design Comes with all SMD components pre-soldered for user ease. AP2112K Low Dropout Regulator Comes with all SMD components pre-soldered for user ease. MCP73318 Custom Circuit Board design Comes with all SMD components pre-soldered for user ease. Pinout # # Name Description 1 GND 2 3V3 3 SDA Read battery % over I2C 4 SCL Read battery % over I2C 5 GND 6 VCC Power in \u0026amp; out* 7 BAT Battery + 8 EN Short to BAT `}),e.add({id:11,href:"/docs/usb-attacks/payloads/",title:"Payload Guide",description:"Write DuckyScript Payloads with the ScriptKitty Firmware",content:`
Our ScriptKitty Firmware supports DuckyScript™, making it easy to create your first payload! If you need inspiration, you can find a list of DuckyScrit payloads on the Hak5 GitHub repository.
Payload Methodology # When creating a keystroke injection payload, work backwards! Start by thinking about what you want the payload to accomplish (a RickRoll perhaps), and figure out what programs (web browser, terminal, etc.) have to be launched to achieve that end goal.
Then, try it out manually on your keyboard! Make sure to write down the steps. Next, let\u0026rsquo;s break it down into actual DuckyScript!
Quick Tips # Launching a terminal / run dialog is typically the easiest way to accomplish most things using only a keyboard. Try it yourself! Linux: CTRL+ALT+T Mac: CMD+SPACE Windows: WIN+R Keyboard Shortcuts \u0026amp; Modifier Keys can be used to navigate a GUI, switch browser tabs, and so much more! Check it out: Windows Mac Linux ScriptKitty types 10 times faster than a person - make sure to add delays in your scripts to let things launch! Creating the Payload # On the ScriptKitty flash drive, create a txt file under one of the folders. You can use your favorite text editor to modify the script! Check out some of the other example scripts to get an idea.
When composing a DuckyScript™ payload, commands are executed line by line - as if you\u0026rsquo;re the one executing commands on a keyboard, behind the computer. It\u0026rsquo;s also possible to press multiple keys at the same time by putting commands on the same line!
There\u0026rsquo;s 3 basic types of actions you can execute with DuckyScript: Typing, Key Combos, and Waiting. Keep this in mind and lets see how this translates into DuckyScript!
Example Result SHIFT c Types a capital C STRING SHIFT C Types out \u0026ldquo;SHIFT c\u0026rdquo; Basic DuckyScript™ # Basic Commands # Command Example Description STRING STRING Hello World! Types whatever string follows the command DELAY DELAY 1000 Sets a one-time delay in ms REM REM Hello World! This is used to leave comments, and is not executed in the script DEFAULTDELAY or DEFAULT_DELAY DEFAULTDELAY 200 This sets the default time in ms between each command LED LED R Changes the color of the LED: R G B C Y M W Supported Keys # Most standard keys are supported by ScriptKitty.
Keys a-z A-Z 1-9 F1-F12 Modifier Keys # Keys like SHIFT, ALT, and the WINDOWS or GUI key can be useful for accessing hotkey combinations, are are frequently used in combination key presses.
Key CTRL or CONTROL SHIFT ALT WINDOWS or GUI Other Useful Keys # Virtually anything you can do behind a keyboard can be recreated with the right keypresses. The following keys are essential to trigger keyboard shortcuts and navigate without a mouse.
Key ENTER MENU or APP DELETE HOME INSERT PAGEUP PAGEDOWN UP or UPARROW DOWN or DOWNARROW LEFT or LEFTARROW RIGHT or RIGHTARROW TAB END ESC or ESCAPE SPACE PAUSE or BREAK CAPSLOCK NUMLOCK PRINTSCREEN SCROLLLOCK Example Payload # RickRoll Payload on Linux
REM Keyboard shortcut to open terminal on Ubuntu CTRL ALT T DELAY 1000 REM Launch Firefox \u0026amp; press enter STRING firefox \u0026quot;https://www.youtube.com/watch?v=dQw4w9WgXcQ\u0026quot; ENTER DELAY 2000 REM Youtube Video fullscreen \u0026amp; play SPACE STRING F `}),e.add({id:12,href:"/docs/usb-attacks/load-payloads/",title:"Config",description:"How to configure WiFi \u0026 USB Settings on ScriptKitty",content:`To edit the default WiFi network on ScriptKitty, or change the default USB device identifiers on ScriptKitty, you can simply edit the config.txt file on the flash drive! To reload the settings, simply restart your CutieCat!
Settings # Parameter Description Value network WiFi AP SSID anything without spaces password WiFi AP Password must be 8 or more characters vid USB Vendor ID Hex value like 0x00 pid USB Product ID Hex value like 0x00 Emulate USB Devices # By default, the ScriptKitty Firmware emulates an Apple Keyboard to bypass MacOS flagging non-Apple keyboards.
You can easily modify the type of device it emulates by editing the config.txt file on the flash drive! All you have to do is edit the VID and PID parameter - which correspond to Vendor ID and Product ID respectively.
You can use a USB vendor lookup tool like this open database to choose a device to emulate.
On Linux / Mac you can check if this worked using:
lsusb On Windows, check your Device Manager!
`}),e.add({id:13,href:"/docs/wardriving/hardware/",title:"Hardware",description:"the DevKitty Wardriver makes WiFi reconnaissance pocket-sized and cat-themed!",content:`
What You Need # Wardriving combines wireless reconnaissance \u0026amp; location data - since DevKitty boards are already capable of sniffing WiFi \u0026amp; Bluetooth, this means all you need is a GPS module!
MicroSD Card GPS Module Battery Pack (optional) Official Hardware # For v0 DevKitty boards, our UART expansion header makes it easy to plug-and-play GPS modules without any fuss! You can buy one here.
GPS Modules # The Wardriver Firmware should work with any UART GPS module! Our current plug-and-play GPS uses the ATGM336H because of its small footprint. We\u0026rsquo;ve tested the following:
NEO-6M NEO-M8N ATGM336H Pinout Guide # This should work for any UART GPS module. We recommend using one of the following! The ATGM336H is our favorite for its small footprint.
DevKitty Header Pin GPS Pin 5V VCC GND GND D4 RX A0 TX Not Connected PPS Mods # `}),e.add({id:14,href:"/docs/get-started/developer/",title:"👨‍💻  Developer Guide",description:"Get started contributing to DevKitty Hardware \u0026 Firmware.",content:` ℹ️ This page is under construction. Hardware # Currently not accepting PR\u0026rsquo;s, but fixes \u0026amp; suggestions are welcome!
PCB: Designed in KiCAD Enclosure: Designed in FreeCAD Firmware # ℹ️ Coming soon Tools # ESPTool # ESPTool is the official tool for managing Espressif chips. It can identify boards, modify flash space, and more!
Install ESPTool # pip3 install esptool.py Create a Binary # After developing and writing custom firmware to the ESP32, you may wish to extract a fullsize binary that contains your application, and perhaps files on the flash space.
This is how our ScriptKitty Binary includes default examples in the flash drive.
esptool.py read_flash 0 0x400000 \u0026lt;vx.x_binary_ddmmyy\u0026gt;.bin Flash a Binary # We suggest using ESPtool for writing binaries, but our web flasher is more accessible for beginners.
esptool.py write_flash 0 \u0026lt;vx.x_binary_ddmmyy\u0026gt;.bin Documentation # Our documentation is written in Markdown, and rendered as a static site using Hugo with the Doks Theme. The source code is hosted on our GitHub, and new updates are automatically rendered \u0026amp; hosted on GitHub pages.
This makes it really easy for anyone to contribute a pull request!
`}),e.add({id:15,href:"/docs/guides/update-with-chrome/",title:"Firmware Update: Browser",description:"How to flash your DevKitty through Google Chrome",content:` ℹ️ WebSerial is an experimental feature that only works in Chrome-based browsers. Step 1: Downloads # Download the Chrome Browser Download the latest DevKitty Firmware Step 2: Place Your DevKitty in Flash Mode # Next, you\u0026rsquo;ll have to place your DevKitty into DFU (Device Firmware Upgrade) mode! You can do this in 2 ways:
Option 1:
Plug the DevKitty into your computer Hold down the 0 button Tap \u0026amp; Release the RST button Option 2:
Hold down the 0 button Plug in the DevKitty Release the 0 button Step 3: Flashing # Open the Web Flasher Application in a Chrome browser! Connect to Your DevKitty, which identifies as an ESP32-S2 device Upload your DevKitty .bin firmware file! Step 6: Once connected, click \u0026ldquo;Erase\u0026rdquo; \u0026amp; confirm.
Congrats! Your DevKitty is ready to hack. # Plug in your DevKitty and watch it mount as a flash drive. You can open the drive to explore preinstalled payloads and begin to add your own.
You can also connect via the web interface and run payloads from any device! The network name is DevKitty and the password is DevKitty123 to connect. Once connected, navigate to 192.168.4.1 in a browser.
`}),e.add({id:16,href:"/docs/usb-attacks/wifi/",title:"Remote Attacks",description:"Deploy remote attacks with the ScriptKitty firmware",content:` The ScriptKitty Firmware has a WiFi interface that enables remote access for wireless-triggered USB attacks. Let\u0026rsquo;s try it out!
Connecting # By default, the ScriptKitty firmware uses the following credentials. Just join the access point from your phone or laptop!
Network: DevKitty Password: 12345678 Next, navigate to 192.168.4.1 in a web browser. This brings you to the ScriptKitty attack interface.
Running \u0026amp; Creating Payloads # docs coming soon
Settings # To modify the WiFi credentials, open the config.txt file on the flash drive, and change the network \u0026amp; password parameters. You\u0026rsquo;ll need to restart after this.
The ability to change settings from the web interface is coming soon!
`}),e.add({id:17,href:"/docs/get-started/",title:"Get Started",description:"Prologue Doks.",content:""}),e.add({id:18,href:"/docs/resources/support/",title:"Support",description:"Get started with the DevKitty",content:`For general support, contact support@devkitty.io.
For inquiries, contact inquiries@devkitty.io.
👥 Community # Join our Discord to share what you\u0026rsquo;re building with the DevKitty community! We\u0026rsquo;d also love to hear from you on Instagram \u0026amp; Twitter.
🪲 Support # If you’re having software or hardware problems with the DevKitty, please open an issue on the appropriate GitHub repository.
For general support, join our Discord Channel.
`}),e.add({id:19,href:"/docs/wardriving/devkitty-wardriver/",title:"Firmware",description:"the DevKitty Wardriver makes WiFi reconnaissance pocket-sized and cat-themed!",content:`
Wardriver Firmware # The DevKitty Wardriver Firmware logs data to the onboard MicroSD card so you can easily map WiFi devices \u0026amp; visualize data! Currently supports CutieCat \u0026amp; older Nugget boards!
Features # This project is currently in alpha release so features will be changing heavily. the DevKitty Wardriver currently works best as a WiGLE companion!
Built-In Flash Drive (for logs) SD Card Support Promiscuous WiFi Scanning WiGLE.net compatible logs Cats! Hardware # This should work for any UART GPS module. We recommend using one of the following! The ATGM336H is our favorite for its small footprint.
NEO-6M NEO-M8N ATGM336H DevKitty Header Pin GPS Pin 5V VCC GND GND D4 RX A0 TX Not Connected PPS Firmware # the DevKitty Wardriver source code is available at github.com/LyndLabs/Wardriver, but not available as a binary yet. This is coming soon!
`}),e.add({id:20,href:"/docs/guides/update-with-esptool/",title:"Flashing via Command Line",description:"Flashing your DevKitty via Command Line, using ESPTool",content:` ℹ️ Unless you hate Chrome, we recommend checking out our browser flashing guide for an easier experience. Step 1: Downloads # Download the latest Firmware Download ESPTool Step 2: Place Your DevKitty in Flash Mode # Next, you\u0026rsquo;ll have to place your DevKitty into DFU (Device Firmware Upgrade) mode! You can do this in 2 ways:
Option 1:
Plug the DevKitty into your computer Hold down the 0 button Tap \u0026amp; Release the RST button Option 2:
Hold down the 0 button Plug in the DevKitty Release the 0 button Step 3: Find Serial Port \u0026amp; Erase Flash # Find the Serial Port (SERIAL_PORT) your DevKitty is connected to: Windows: Found via Device Manager MacOS: ls /dev/cu* Linux: ls /dev/tty* Erase the flash: Windows / Mac / Linux: esptool --chip esp32s2 -p \u0026lt;SERIAL_PORT\u0026gt; erase_flash Step 4: Flashing # Run the following command to flash the latest release file to your DevKitty!
Windows / Mac / Linux esptool --chip esp32s2 -p \u0026lt;SERIAL_PORT\u0026gt; write_flash -z 0x0 \u0026lt;binary\u0026gt;.bin Your DevKitty is ready to hack! # Once flashing is finished, reset your DevKitty to complete the update.
`}),e.add({id:21,href:"/docs/usb-attacks/api/",title:"Live Control API",description:"Run Commands live",content:`The DevKitty supports live command both through a web interface and via a web API.
Web Interface # To access the web interface and run payloads live, connect to the DevKitty\u0026rsquo;s Wi-Fi access point and visit http://192.168.4.1/create.html
From this page, you can create, run, and save payloads to your DevKitty. Python Script # If you want to use a scrip to send DuckyScript commands or files to your DevKitty, the following scripts will help you get started. The following simple Python script can be used to send individual DuckyScript commands from your computer while connected to the DevKitty\u0026rsquo;s Wi-Fi network.
import requests, base64 url = 'http://192.168.4.1/runlive.php' while True: pew = input(\u0026quot;Enter command:\\n\u0026quot;) try: requests.post(url, base64.b64encode(pew.encode())) except: print(\u0026quot;Sent\u0026quot;) If you want to sent entire DuckyScript payloads, you can use the following short script to send .TXT files.
import requests, base64 url = 'http://192.168.4.1/runlive.php' while True: pew = input(\u0026quot;Enter path to Duckyscript File:\\n\u0026quot;) file = open(pew, \u0026quot;r\u0026quot;) payload = file.read() try: requests.post(url, base64.b64encode(payload.encode())) except: pew = input(\u0026quot;Sent, press enter to send another:\\n\u0026quot;) `}),e.add({id:22,href:"/docs/wifi-hacking/wi-fi-sniffing/",title:"Wi-Fi Sniffing",description:"Sniff \u0026 Parse Wi-Fi Packets with CircuitPython",content:`The DevKitty hardware can sniff Wi-Fi packets, allowing hackers to hunt for particular Wi-Fi devices or write packet filters to display deauthentication packets. To get started, you\u0026rsquo;ll need to install CircuitPython on your DevKitty.
`}),e.add({id:23,href:"/docs/hardware/",title:"Hardware",description:"Use Cases for the DevKitty",content:""}),e.add({id:24,href:"/docs/wardriving/data-analysis/",title:"Data Visualization",description:`Why Data Visualization? # Visualizations are invaluable for quickly making sense of large datasets - thanks to Python, we can easily visualize \u0026amp; plot our wardriving data! Data manipulation libraries like Pandas make it easy to
Check out the slides from Alex\u0026rsquo;s DEFCON workshop here! More coming to this page soon.
Links # Google Colab WiGLE `,content:`Why Data Visualization? # Visualizations are invaluable for quickly making sense of large datasets - thanks to Python, we can easily visualize \u0026amp; plot our wardriving data! Data manipulation libraries like Pandas make it easy to
Check out the slides from Alex\u0026rsquo;s DEFCON workshop here! More coming to this page soon.
Links # Google Colab WiGLE `}),e.add({id:25,href:"/docs/wifi-hacking/ssdp-phising/",title:"SSDP Phishing",description:"Pose as network devices to phish Windows users!",content:" DevKitty can be flashed to act as a SSDP (Simple Service Discovery Protocol) device, connecting to a Wi-Fi network appearing to nearby Windows users as a network-attached drive. This attack can be used to redirect users to phishing pages when they click on the drive. We created a demo you can find here You can check out the guide below to try the attack yourself: "}),e.add({id:26,href:"/docs/wardriving/wigle/",title:"🗺️ | Wigle",description:`Why Data Visualization? # Visualizations are invaluable for quickly making sense of large datasets - thanks to Python, we can easily visualize \u0026amp; plot our wardriving data! Data manipulation libraries like Pandas make it easy to
Check out the slides from Alex\u0026rsquo;s DEFCON workshop here! More coming to this page soon.
Links # Google Colab WiGLE `,content:`Why Data Visualization? # Visualizations are invaluable for quickly making sense of large datasets - thanks to Python, we can easily visualize \u0026amp; plot our wardriving data! Data manipulation libraries like Pandas make it easy to
Check out the slides from Alex\u0026rsquo;s DEFCON workshop here! More coming to this page soon.
Links # Google Colab WiGLE `}),e.add({id:27,href:"/docs/wardriving/kismet/",title:"📡 | Kismet",description:`What is Kismet? # Kismet is a popular wardriving \u0026amp; wireless recon tool that lets you sniff WiFi, Bluetooth, Cellular, and other protocols in a streamlined web app! When you\u0026rsquo;re ready to take your wardriving skills to the next level, we recommend trying out this project.
This is an example of Kismet in action in one of Alex\u0026rsquo;s old videos!
DevKitty Kismet Interface # You can use your DevKitty board as a Kismet Interface!`,content:`What is Kismet? # Kismet is a popular wardriving \u0026amp; wireless recon tool that lets you sniff WiFi, Bluetooth, Cellular, and other protocols in a streamlined web app! When you\u0026rsquo;re ready to take your wardriving skills to the next level, we recommend trying out this project.
This is an example of Kismet in action in one of Alex\u0026rsquo;s old videos!
DevKitty Kismet Interface # You can use your DevKitty board as a Kismet Interface! Thanks to Kismet Scan Mode, we can report basic WiFi, Bluetooth, and GPS telemetry to the web app!
The interface works by sending that wireless data over a Serial connection, and using a Rust Script that creates Scan Reports to the Kismet API.
DevKitty Scan Mode # `}),e.add({id:28,href:"/docs/guides/",title:"Setup Guides",description:"Guides for the DevKitty",content:""}),e.add({id:29,href:"/docs/usb-attacks/",title:"USB Hacking",description:"Fundamental Projects for the DevKitty",content:""}),e.add({id:30,href:"/docs/resources/developers/",title:"Developers",description:"DevKitty Developer Resources",content:`Hardware # All our hardware is open source! Check the hardware tab for design specs \u0026amp; fab files.
Software # `}),e.add({id:31,href:"/docs/resources/feedback/",title:"Feedback",description:"DevKitty Developer Resources",content:`Hardware # All our hardware is open source! Check the hardware tab for design specs \u0026amp; fab files.
Software # `}),e.add({id:32,href:"/docs/resources/troubleshoot/",title:"Troubleshoot",description:"DevKitty Developer Resources",content:`Hardware # All our hardware is open source! Check the hardware tab for design specs \u0026amp; fab files.
Software # `}),e.add({id:33,href:"/docs/wifi-hacking/",title:"WiFi Hacking",description:"WiFi Hacking \u0026 Recon on the DevKitty!",content:""}),e.add({id:34,href:"/docs/wardriving/",title:"Wardriving",description:"WiFi Hacking \u0026 Recon on the DevKitty!",content:""}),e.add({id:35,href:"/docs/developers/designers/",title:"Case Designs",description:"Enclosure Designs for DevKitty",content:` ℹ️ Tolerances on 3D printed cases may be imperfect. We try our best to improve the design with each new batch we ship. Links # 📐 PCB Dimensions 📁 Case Files Features # DevKitty ships with a basic 3D-printed enclosure that protects the screen \u0026amp; other components from damage in transit.
The design is comprised of 4 parts:
Faceplate Backplate D-Pad Bumper The design snap fits together with 3 bevels and 2 relief points. You\u0026rsquo;ll notice the PCB contains screw stand-offs from older designs that used threaded inserts.
The 3D printed Bumper Button interfaces with the Boot Button / 0 Button on the S2 mini - which is necessary to toggle if you\u0026rsquo;re reflashing your firmware.
Case Evolution # As much as we\u0026rsquo;d love to openly display our beautiful circuit board art, the screens fractured easily when shipping earlier DevKitty boards. This called for a fully encapsulated enclosure!
A couple iterations later, we ended up with a chonky console-like design that can be easily 3D printed!
The most recent v3.1 boards were shipped with updated cases that allow you to toggle the Boot Button without having to remove the enclosure.
ℹ️ For feature requests or complaints, leave feedback on our GitHub Repo! Other Designs # Slim Mod: Put your DevKitty on a diet with this slim mod by Alex Lynd! `}),e.add({id:36,href:"/docs/hardware/designers/",title:"Case Designs",description:"Enclosure Designs for DevKitty",content:` ℹ️ Tolerances on 3D printed cases may be imperfect. We try our best to improve the design with each new batch we ship. Links # 📐 PCB Dimensions 📁 Case Files Features # DevKitty ships with a basic 3D-printed enclosure that protects the screen \u0026amp; other components from damage in transit.
The design is comprised of 4 parts:
Faceplate Backplate D-Pad Bumper The design snap fits together with 3 bevels and 2 relief points. You\u0026rsquo;ll notice the PCB contains screw stand-offs from older designs that used threaded inserts.
The 3D printed Bumper Button interfaces with the Boot Button / 0 Button on the S2 mini - which is necessary to toggle if you\u0026rsquo;re reflashing your firmware.
Case Evolution # As much as we\u0026rsquo;d love to openly display our beautiful circuit board art, the screens fractured easily when shipping earlier DevKitty boards. This called for a fully encapsulated enclosure!
A couple iterations later, we ended up with a chonky console-like design that can be easily 3D printed!
The most recent v3.1 boards were shipped with updated cases that allow you to toggle the Boot Button without having to remove the enclosure.
ℹ️ For feature requests or complaints, leave feedback on our GitHub Repo! Other Designs # Slim Mod: Put your DevKitty on a diet with this slim mod by Alex Lynd! `}),e.add({id:37,href:"/docs/resources/",title:"Resources",description:"DevKitty Resources \u0026 Support",content:""}),e.add({id:38,href:"/docs/developers/",title:"Hardware",description:"Use Cases for the DevKitty",content:""}),e.add({id:39,href:"/docs/",title:"Docs",description:"DevKitty Doks",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()