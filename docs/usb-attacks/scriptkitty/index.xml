<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scriptkitty on</title><link>/docs/usb-attacks/scriptkitty/</link><description>Recent content in Scriptkitty on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 25 Nov 2023 19:17:14 -0800</lastBuildDate><atom:link href="/docs/usb-attacks/scriptkitty/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>/docs/usb-attacks/scriptkitty/introduction/</link><pubDate>Sat, 27 Aug 2022 08:48:57 +0000</pubDate><guid>/docs/usb-attacks/scriptkitty/introduction/</guid><description>ℹ️ Check out the flashing guide to load this firmware on your DevKitty! ScriptKitty is a cat-themed keystroke injection tool that lets you select hundreds of payloads using the on-screen interface - or even deploy attacks remotely via a WiFi interface!
Run and edit payloads over Wi-Fi from mobile and desktop devices, or use the quick-select menu to launch payloads at the press of a button. Watch each command execute in real time on the built-in screen, and get instant feedback on your attack from the built-in LED.</description></item><item><title>WiFi Interface</title><link>/docs/usb-attacks/scriptkitty/wifi-interface/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/usb-attacks/scriptkitty/wifi-interface/</guid><description>The ScriptKitty Firmware has a WiFi interface that enables remote access for wireless-triggered USB attacks. Let&amp;rsquo;s try it out!
Connecting # By default, the ScriptKitty firmware uses the following credentials. Just join the access point from your phone or laptop!
Network: ScriptKitty Password: 12345678 Next, navigate to 192.168.4.1 in a web browser. This brings you to the ScriptKitty attack interface.
Running &amp;amp; Creating Payloads # docs coming soon
Settings # To modify the WiFi credentials, open the scriptkitty.</description></item><item><title>Live Control</title><link>/docs/usb-attacks/scriptkitty/live-control/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/usb-attacks/scriptkitty/live-control/</guid><description>The DevKitty supports live command both through a web interface and via a web API.
Web Interface # To access the web interface and run payloads live, connect to the DevKitty&amp;rsquo;s Wi-Fi access point and visit http://192.168.4.1/create.html
From this page, you can create, run, and save payloads to your DevKitty. Python Script # If you want to use a scrip to send DuckyScript commands or files to your DevKitty, the following scripts will help you get started.</description></item><item><title>Writing Your First Payload</title><link>/docs/usb-attacks/scriptkitty/write-first-payload/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/usb-attacks/scriptkitty/write-first-payload/</guid><description>The DevKitty supports DuckyScript™, making it easy to create your first payload!
If you need inspiration, you can find a list of DuckyScrit payloads on the Hak5 GitHub repository.
To get started, let&amp;rsquo;s review the full list of DuckyScript™ commands the DevKitty supports.
DuckyScript™ Payload Structure # When composing a DuckyScript™ payload, commands are executed line by line. It&amp;rsquo;s also possible to press multiple keys at the same time by putting commands on the same line!</description></item><item><title>Loading Payloads on the DevKitty</title><link>/docs/usb-attacks/scriptkitty/load-payloads/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/usb-attacks/scriptkitty/load-payloads/</guid><description>The DevKitty supports adding payloads both through the web interface and directly over USB.
To start, let&amp;rsquo;s write a simple DuckyScript Payload and save it over USB.
Step 1: Write &amp;amp; Save a Simple Script
In your word processer of choice, write out a simple script and save it a plain .TXT file
GUI SPACE DELAY 100 STRING Terminal ENTER DELAY 1000 STRING curl parrot.live ENTER Step 2: Plug in Your DevKitty</description></item></channel></rss>