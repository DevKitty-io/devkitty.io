var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/usb-nugget/scriptkitty/introduction/",title:"Introduction",description:"ScriptKitty: The cat-themed USB attack tool",content:` ℹ️ Check out the flashing guide to load this firmware on your DevKitty! ScriptKitty is a cat-themed keystroke injection tool that lets you select hundreds of payloads using the on-screen interface - or even deploy attacks remotely via a WiFi interface!
Run and edit payloads over Wi-Fi from mobile and desktop devices, or use the quick-select menu to launch payloads at the press of a button. Watch each command execute in real time on the built-in screen, and get instant feedback on your attack from the built-in LED.
The DevKitty mounts as a USB flash drive when plugged into your computer, making it easy to drag and drop multiple payloads to the onboard storage!
Features # Current version - v1.0-Beta
Stores Hundreds of Payloads Flash Drive for Easy Exfiltration WiFi Interface for editing + deploying attacks Visual Payload Feedback Get Started # Source Code + Binary `}),e.add({id:1,href:"/docs/guides/dev-kit-assembly/",title:"Assembly Guide",description:"Soldering \u0026 assembling your DevKitty!",content:` ⚠️ Assembly video \u0026 updated pics coming soon. Parts # Buy the DevKitty soldering kit on our webstore!
Part Description Count DevKitty PCB Partially assembled PCB 1 Microcontroller S2 Mini (ESP32-S2 Breakout) 1 Screen SH1106 I2C Display 1 Male Header (Short) S2 Mini Mounting Headers 2 *Female Header (Short) S2 Mini Breakout Headers 2 *Female Header (Long) Expansion Header 1 Learn more about these parts →
Your DevKitty PCB comes with surface mount Buttons, NeoPixel, and Qwiic Connector pre-soldered since these are a little tricky!
Steps # 1. Prep the Mounting Headers # Start by soldering the male headers to your DevKitty PCB, button side up!
The short side of the pin headers should poke through Using a breadboard can help keep them in place! If not you can rest it carefully flush on the table. ℹ️ Check out our slim mod before continuing if you want a smaller form-factor! 2. Assemble the Microcontroller # This step is optional!
Assemble the microcontroller, by soldering the short female pin headers to the inside rows of the S2 Mini.
You can flip the microcontroller over on a flat surface to solder the pins. Be careful not to get solder in the other holes! Next, press the S2 Mini onto the headers on the back of your DevKitty - and solder! 3. Solder the Expansion Header # Next, solder on the long female header to the side of your DevKitty PCB. You should be able to lay the board flush on a table. 4. Prep \u0026amp; Solder the Screen # Next, peel off the adhesive tape on your DevKitty PCB, and gently push the screen in place.
Be careful to avoid the edges of the screen! It can crack. 5. Assemble the Case # Finally, assemble the snap fit case!
Insert the Bumper Button into the Lower Enclosure Press fit the assembled DevKitty into the Lower Enclosure Next, place the D-Pad into the Upper Enclosure, face down Flip over the Lower Enclosure, and snap it into place! 6. Power Your DevKitty! # Plug your DevKitty into a USB-C power source. It should run a simple function tester on the screen and Neopixel if successful.
Now we\u0026rsquo;re ready to update our firmware!
Links # 3D Printed Cases Component Selection `}),e.add({id:2,href:"/docs/guides/pick-firmware/",title:"Firmware Guide",description:"Picking the right firmware for your DevKitty.",content:` ℹ️ Our firmware is currently experimental as we continue to explore \u0026 make improvements to the DevKitty ecosystem. Overview # The ESP32-S2 is a capable chip that supports WiFi functionality, native USB, and a handful of other nifty features that make it perfect for powering our pocket-sized hacking companions.
At the moment, we\u0026rsquo;re experimenting with custom firmware that maximizes DevKitty\u0026rsquo;s independent strengths - this includes:
DevKitty Wardriver: Cat-themed wardriving \u0026amp; WiFi reconnaissance DevKitty Invader: A simple WiFi attack \u0026amp; network defense tool (coming soon) ScriptKitty: A BadUSB platform with WiFi-triggered attacks \u0026amp; onboard storage! These tools aren\u0026rsquo;t perfect, but we\u0026rsquo;re building them alongside our educational content and focusing on bringing more functionality to the features \u0026amp; specific tools based off your feedback.
CircuitPython # Adafruit\u0026rsquo;s CircuitPython is an interpreted programming language, that runs directly on your DevKitty, and a handful of other capable boards.
CircuitPython lets you develop code \u0026amp; prototype on any computer - or even your smartphone without needing\u0026hellip; finish this thought
`}),e.add({id:3,href:"/docs/developers/pinout/",title:"Specs",description:"DevKitty Pinout Documentation",content:"Links # Assembly Guide Features # Name Part(s) Description DevKitty PCB 1.6mm 2 layer PCB with NeoPixel \u0026amp; Buttons pre-soldered Microcontroller S2 Mini An ESP32S2 breakout board in the D1 Mini form factor. Screen SH1106 128x64 px 1.3\u0026quot; OLED Display Headers x2 Short Female, x2 Short Male, x1 Long Female Various expansion headers. Only the male headers are necessary! Dimensions # Headers # "}),e.add({id:4,href:"/docs/wardriving/introduction/",title:"Introduction",description:"Get started with Wardriving!",content:`
What is Wardriving? # Wardriving is a reconaissance technique that involves driving around while scanning for wireless devices. It\u0026rsquo;s one of the quickest ways to gather intelligence on large amounts of WiFi networks and devices!
Typically, all you need is a WiFi \u0026amp; GPS enabled device (like a smartphone), but you can get started for as cheap as \$10 using microcontrollers. We\u0026rsquo;re basically just \u0026ldquo;geotagging\u0026rdquo; the wireless devices, so we can locate them later on.
`}),e.add({id:5,href:"/docs/get-started/introduction/",title:"What is DevKitty?",description:"Meet DevKitty: Your cat-themed hacking \u0026 prototyping companion!",content:` DevKitty is your cat-themed hacking \u0026amp; prototyping companion!
With our growing collection of educational guides \u0026amp; videos, DevKitty is putting a hacking classroom in your pocket. DevKitty teaches you as you explore the wireless landscape and audit computers around you!
What Can DevKitty Do? # DevKitty is a portable hacking console that supports WiFi Hacking, USB Attacks, Wardriving, and more! Its capabilities are growing, and you can even contribute to the platform.
Right now the following projects are supported:
ScriptKitty: Cat-Themed USB Hacking! Wardriver: Gather Intel on Wireless Networks CircuitPython: Bite-sized hacking projects `}),e.add({id:6,href:"/docs/guides/update-with-chrome/",title:"Firmware Update: Browser",description:"How to flash your DevKitty through Google Chrome",content:` ℹ️ WebSerial is an experimental feature that only works in Chrome-based browsers. Step 1: Downloads # Download the Chrome Browser Download the latest DevKitty Firmware Step 2: Place Your DevKitty in Flash Mode # Next, you\u0026rsquo;ll have to place your DevKitty into DFU (Device Firmware Upgrade) mode! You can do this in 2 ways:
Option 1:
Plug the DevKitty into your computer Hold down the 0 button Tap \u0026amp; Release the RST button Option 2:
Hold down the 0 button Plug in the DevKitty Release the 0 button Step 3: Flashing # Open the Web Flasher Application in a Chrome browser! Connect to Your DevKitty, which identifies as an ESP32-S2 device Upload your DevKitty .bin firmware file! Step 6: Once connected, click \u0026ldquo;Erase\u0026rdquo; \u0026amp; confirm.
Congrats! Your DevKitty is ready to hack. # Plug in your DevKitty and watch it mount as a flash drive. You can open the drive to explore preinstalled payloads and begin to add your own.
You can also connect via the web interface and run payloads from any device! The network name is DevKitty and the password is DevKitty123 to connect. Once connected, navigate to 192.168.4.1 in a browser.
`}),e.add({id:7,href:"/docs/usb-nugget/scriptkitty/wifi-interface/",title:"WiFi Interface",description:"Deploy remote attacks with the ScriptKitty firmware",content:` The ScriptKitty Firmware has a WiFi interface that enables remote access for wireless-triggered USB attacks. Let\u0026rsquo;s try it out!
Connecting # By default, the ScriptKitty firmware uses the following credentials. Just join the access point from your phone or laptop!
Network: ScriptKitty Password: 12345678 Next, navigate to 192.168.4.1 in a web browser. This brings you to the ScriptKitty attack interface.
Running \u0026amp; Creating Payloads # docs coming soon
Settings # To modify the WiFi credentials, open the scriptkitty.conf file on the flash drive, and change the network \u0026amp; password parameters. You\u0026rsquo;ll need to restart after this.
The ability to change settings from the web interface is coming soon!
`}),e.add({id:8,href:"/docs/get-started/",title:"Get Started",description:"Prologue Doks.",content:""}),e.add({id:9,href:"/docs/get-started/quick-start/",title:"Support",description:"Get started with the DevKitty",content:`Help # If you’re having software or hardware problems with the DevKitty, please open an issue on the appropriate GitHub repository.
For general support, join our Discord Channel.
Social Media # Instagram X (Twitter) Contact Us # For collaborations or other inquiries, contact Alex at support@lyndlabs.io
`}),e.add({id:10,href:"/docs/wardriving/nugget-wardriver/",title:"DevKitty Wardriver",description:"the DevKitty Wardriver makes WiFi reconnaissance pocket-sized and cat-themed!",content:`
Features # This project is currently in alpha release so features will be changing heavily. the DevKitty Wardriver currently works best as a WiGLE companion!
Built-In Flash Drive (for logs) SD Card Support Promiscuous WiFi Scanning WiGLE.net compatible logs Cats! Hardware # This should work for any UART GPS module. We recommend using one of the following! The ATGM336H is our favorite for its small footprint.
NEO-6M NEO-M8N ATGM336H DevKitty Header Pin GPS Pin 5V VCC GND GND D4 RX A0 TX Not Connected PPS Firmware # the DevKitty Wardriver source code is available at github.com/LyndLabs/Wardriver, but not available as a binary yet. This is coming soon!
`}),e.add({id:11,href:"/docs/guides/update-with-esptool/",title:"Flashing via Command Line",description:"Flashing your DevKitty via Command Line, using ESPTool",content:` ℹ️ Unless you hate Chrome, we recommend checking out our browser flashing guide for an easier experience. Step 1: Downloads # Download the latest Firmware Download ESPTool Step 2: Place Your DevKitty in Flash Mode # Next, you\u0026rsquo;ll have to place your DevKitty into DFU (Device Firmware Upgrade) mode! You can do this in 2 ways:
Option 1:
Plug the DevKitty into your computer Hold down the 0 button Tap \u0026amp; Release the RST button Option 2:
Hold down the 0 button Plug in the DevKitty Release the 0 button Step 3: Find Serial Port \u0026amp; Erase Flash # Find the Serial Port (SERIAL_PORT) your DevKitty is connected to: Windows: Found via Device Manager MacOS: ls /dev/cu* Linux: ls /dev/tty* Erase the flash: Windows / Mac / Linux: esptool --chip esp32s2 -p \u0026lt;SERIAL_PORT\u0026gt; erase_flash Step 4: Flashing # Run the following command to flash the latest release file to your DevKitty!
Windows / Mac / Linux esptool --chip esp32s2 -p \u0026lt;SERIAL_PORT\u0026gt; write_flash -z 0x0 \u0026lt;binary\u0026gt;.bin Your DevKitty is ready to hack! # Once flashing is finished, reset your DevKitty to complete the update.
`}),e.add({id:12,href:"/docs/usb-nugget/scriptkitty/live-control/",title:"Live Control",description:"Run Commands live",content:`The DevKitty supports live command both through a web interface and via a web API.
Web Interface # To access the web interface and run payloads live, connect to the DevKitty\u0026rsquo;s Wi-Fi access point and visit http://192.168.4.1/create.html
From this page, you can create, run, and save payloads to your DevKitty. Python Script # If you want to use a scrip to send DuckyScript commands or files to your DevKitty, the following scripts will help you get started. The following simple Python script can be used to send individual DuckyScript commands from your computer while connected to the DevKitty\u0026rsquo;s Wi-Fi network.
import requests, base64 url = 'http://192.168.4.1/runlive.php' while True: pew = input(\u0026quot;Enter command:\\n\u0026quot;) try: requests.post(url, base64.b64encode(pew.encode())) except: print(\u0026quot;Sent\u0026quot;) If you want to sent entire DuckyScript payloads, you can use the following short script to send .TXT files.
import requests, base64 url = 'http://192.168.4.1/runlive.php' while True: pew = input(\u0026quot;Enter path to Duckyscript File:\\n\u0026quot;) file = open(pew, \u0026quot;r\u0026quot;) payload = file.read() try: requests.post(url, base64.b64encode(payload.encode())) except: pew = input(\u0026quot;Sent, press enter to send another:\\n\u0026quot;) `}),e.add({id:13,href:"/docs/wifi-hacking/wi-fi-sniffing/",title:"Wi-Fi Sniffing",description:"Sniff \u0026 Parse Wi-Fi Packets with CircuitPython",content:`The DevKitty hardware can sniff Wi-Fi packets, allowing hackers to hunt for particular Wi-Fi devices or write packet filters to display deauthentication packets. To get started, you\u0026rsquo;ll need to install CircuitPython on your DevKitty.
`}),e.add({id:14,href:"/docs/wardriving/data-analysis/",title:"Data Analysis",description:`Check out the slides from Alex\u0026rsquo;s DEFCON workshop here! More coming to this page soon.
Links # Google Colab WiGLE `,content:`Check out the slides from Alex\u0026rsquo;s DEFCON workshop here! More coming to this page soon.
Links # Google Colab WiGLE `}),e.add({id:15,href:"/docs/wifi-hacking/ssdp-phising/",title:"SSDP Phishing",description:"Pose as network devices to phish Windows users!",content:" DevKitty can be flashed to act as a SSDP (Simple Service Discovery Protocol) device, connecting to a Wi-Fi network appearing to nearby Windows users as a network-attached drive. This attack can be used to redirect users to phishing pages when they click on the drive. We created a demo you can find here You can check out the guide below to try the attack yourself: "}),e.add({id:16,href:"/docs/usb-nugget/scriptkitty/write-first-payload/",title:"Writing Your First Payload",description:"Making DuckyScript Payloads on the DevKitty",content:` The DevKitty supports DuckyScript™, making it easy to create your first payload!
If you need inspiration, you can find a list of DuckyScrit payloads on the Hak5 GitHub repository.
To get started, let\u0026rsquo;s review the full list of DuckyScript™ commands the DevKitty supports.
DuckyScript™ Payload Structure # When composing a DuckyScript™ payload, commands are executed line by line. It\u0026rsquo;s also possible to press multiple keys at the same time by putting commands on the same line!
To write out a piece of text, type STRING in all caps. See the example below for how this works:
Example Result SHIFT C Type the Shift key and then the c key SHIFT C Press the Shift key and the c key at the same time STRING SHIFT C Types out \u0026ldquo;SHIFT c\u0026rdquo; Built-in Commands # Now that we have the basics down, let\u0026rsquo;s take a look at supported commands:
Command Example Description REM REM Hello World! This is used to leave comments, and is not executed in the script DEFAULTDELAY or DEFAULT_DELAY DEFAULTDELAY 200 This sets the default time in ms between each command DELAY DELAY 1000 Sets a one-time delay in ms STRING STRING Hello World! Types whatever string follows the command LED LED R Changes the color of the LED. Current Options: R = red, G = green, B = blue, C = cyan, Y = yellow, M = magenta, W = white Supported Keys # Most standard keys are supported by ScriptKitty.
Key a-z A-Z 1-9 F1-F12 Modifier Keys # Keys like SHIFT, ALT, and the WINDOWS or GUI key can be useful for accessing hotkey combinations, are are frequently used in combination key presses.
Key CTRL or CONTROL SHIFT ALT WINDOWS or GUI Other Useful Keys # Virtually anything you can do behind a keyboard can be recreated with the right keypresses. The following keys are essential to trigger keyboard shortcuts and navigate without a mouse.
Key ENTER MENU or APP DELETE HOME INSERT PAGEUP PAGEDOWN UP or UPARROW DOWN or DOWNARROW LEFT or LEFTARROW RIGHT or RIGHTARROW TAB END ESC or ESCAPE SPACE PAUSE or BREAK CAPSLOCK NUMLOCK PRINTSCREEN SCROLLLOCK Now that we\u0026rsquo;ve gone over the supported DuckyScript commands, let\u0026rsquo;s load and deploy a payload to the DevKitty.
`}),e.add({id:17,href:"/docs/usb-nugget/scriptkitty/load-payloads/",title:"Loading Payloads on the DevKitty",description:"Adding payloads via the USB and web interface",content:`The DevKitty supports adding payloads both through the web interface and directly over USB.
To start, let\u0026rsquo;s write a simple DuckyScript Payload and save it over USB.
Step 1: Write \u0026amp; Save a Simple Script
In your word processer of choice, write out a simple script and save it a plain .TXT file
GUI SPACE DELAY 100 STRING Terminal ENTER DELAY 1000 STRING curl parrot.live ENTER Step 2: Plug in Your DevKitty
Once you\u0026rsquo;ve plugged in your DevKitty with a USB type C cable that supports data transfer, it should appear on your computer as a flash drive.
the DevKitty comes pre-loaded with 4 different folders to cover 3 operating systems and frequently used payloads:
Linux Mac Windows Starred payloads You can re-name these folders if you wish.
Inside each folder, you can add up to 3 sub-folders to organize your payloads by category. Each sub-folder can hold 3 payloads, for a maximum of 36 payloads total.
⛔️ You can add more than 36 payloads and still access them via the web interface, but they will not be visible via the button interface. Step 3: Drag \u0026amp; Drop Your Payload to the DevKitty
We\u0026rsquo;ll drop our payload in a \u0026ldquo;Test\u0026rdquo; folder under the \u0026ldquo;Mac\u0026rdquo; operating system folder. The file structure will look like this:
DevKitty Drive \u0026ndash;\u0026gt; Mac Folder \u0026ndash;\u0026gt; Test Folder \u0026ndash;\u0026gt; Payload.TXT
Once we drop our file onto the DevKitty, we can see it by pressing the left button for the Mac folder, then selecting the \u0026ldquo;Test\u0026rdquo; folder.
Step 4: Select \u0026amp; Run Your Payload Next, we select the \u0026ldquo;Test\u0026rdquo; folder we just made by pressing the left button.
Inside the "Test" folder, we should see our payload.TXT! We can run our payload by pressing the up button.
When the payload starts executing, the LED will turn red.
You can watch each command execute on the built-in screen while the payload runs.
That\u0026rsquo;s it! We\u0026rsquo;ve created a test payload and run it on the DevKitty using the USB interface.
`}),e.add({id:18,href:"/docs/guides/",title:"Setup Guides",description:"Guides for the DevKitty",content:""}),e.add({id:19,href:"/docs/usb-nugget/",title:"USB Hacking",description:"Fundamental Projects for the DevKitty",content:""}),e.add({id:20,href:"/docs/wifi-hacking/",title:"WiFi Hacking",description:"WiFi Hacking \u0026 Recon on the DevKitty!",content:""}),e.add({id:21,href:"/docs/wardriving/",title:"Wardriving",description:"WiFi Hacking \u0026 Recon on the DevKitty!",content:""}),e.add({id:22,href:"/docs/developers/designers/",title:"Case Designs",description:"Enclosure Designs for DevKitty",content:` ℹ️ Tolerances on 3D printed cases may be imperfect. We try our best to improve the design with each new batch we ship. Links # 📐 PCB Dimensions 📁 Case Files Features # DevKitty ships with a basic 3D-printed enclosure that protects the screen \u0026amp; other components from damage in transit.
The design is comprised of 4 parts:
Faceplate Backplate D-Pad Bumper The design snap fits together with 3 bevels and 2 relief points. You\u0026rsquo;ll notice the PCB contains screw stand-offs from older designs that used threaded inserts.
The 3D printed Bumper Button interfaces with the Boot Button / 0 Button on the S2 mini - which is necessary to toggle if you\u0026rsquo;re reflashing your firmware.
Case Evolution # As much as we\u0026rsquo;d love to openly display our beautiful circuit board art, the screens fractured easily when shipping earlier DevKitty boards. This called for a fully encapsulated enclosure!
A couple iterations later, we ended up with a chonky console-like design that can be easily 3D printed!
The most recent v3.1 boards were shipped with updated cases that allow you to toggle the Boot Button without having to remove the enclosure.
ℹ️ For feature requests or complaints, leave feedback on our GitHub Repo! Other Designs # Slim Mod: Put your DevKitty on a diet with this slim mod by Alex Lynd! `}),e.add({id:23,href:"/docs/usb-nugget/introduction/",title:"Introduction",description:" ",content:" "}),e.add({id:24,href:"/docs/usb-nugget/keystroke-injection/",title:"Keystroke Injection",description:"CircuitPython Demo # ",content:"CircuitPython Demo # "}),e.add({id:25,href:"/docs/usb-nugget/mouse-jiggler/",title:"Mouse Jiggler",description:"CircuitPython Demo # ",content:"CircuitPython Demo # "}),e.add({id:26,href:"/docs/usb-nugget/scriptkitty/",title:"Scriptkitty",description:"",content:""}),e.add({id:27,href:"/docs/usb-nugget/py-demo/",title:"🐍 CircuitPython Examples",description:"Quick CircuitPython USB Attack Demos in CircuitPython",content:`Check out the previous sections in this USB Attack Chapter to learn how to use these examples in context!
Quick links are provided below.
Mouse Jiggler Basic Keystroke Injection Emulator Code Repo # `}),e.add({id:28,href:"/docs/developers/",title:"Hardware",description:"Use Cases for the DevKitty",content:""}),e.add({id:29,href:"/docs/",title:"Docs",description:"DevKitty Doks",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()